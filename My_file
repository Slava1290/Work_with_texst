#include <iostream>
#include <string>
#include <fstream>
#include <Windows.h>	//чтобы можно было вводить русские буковки
using namespace std;

/*
	сохранение данных в файл
	чтение данных из файла
*/

//fsrteam класс по записи и чтени файлов
//ifstream	отвечает за чтение данных из файлов
//ofstream возмохность зранения данных в файл


int main()
{	
	setlocale(LC_ALL, "ru");	//чтобы руссский понимал
	
	string path = "MyFile.txt";	//создание переменноц типа string
	
	/*
	//cin >> path;	
	
	ofstream fout;	//объект класса ofstream

	//fout.open(path);		//вызываем метод open()	//автоматически стирает данные


	//Обращаемся к объекту класса ofstream, у которого есть статическая паблик переменная appent - добавить
	fout.open(path, ofstream::app);			//теперь файлы дописываеются в конец файла

	if (!fout.is_open())			//Проверка на существование файла
	{
		cout << "Oshibka!" << endl;
	}
	else
	{
		//fout << "\nNew data";		//Записываем данные в файл

		//Запись файла с консоли
		cout << "Put your number";
		int a;
		cin >> a;
		fout << "\n";
		fout << a;
	}

	fout.close();	//закрытие файла
	*/
	
	

	ifstream fin;	//создание объекта типа ifstream
	fin.open(path);		//вызываем метод open для передачи имени файла


	
	if (!fin.is_open())
	{
		cout << "Oshibka "<< endl;
	}
	else
	{
		cout << "File open " << endl;
		
		//считываем построчно
		
		string str;
		string cstr = "шарик";
		while(!fin.eof())			//метод отлавливает конец файла, возввращает true
		{
			str = "";				//затираем старое значение, чтобы данные считывались коррекно
			getline(fin, str);		//1 - параметр - объект из которого считываем файл, 2 - переменная куда записывается файл построчно
			//fin >> str;				// извлекаем строчки из файла
			


			//Первый метод поиска
			/*
			bool found = str.find(cstr) != string::npos;
			
			if (found) 
			{
				cout << "Строка найдена" << endl;
			}
			else
			{
				cout << "Строка не найдена" << endl;
			}
			*/
			//Второй метод поиска
			
			int num = 0;							//переменная для указания запятых
			int point = 0;							//на каком месте стоит первый знак искомого слова
			int cot = 0;							//проверка входа слова в строку
			for (int i = 0; i < str.size(); i++)	//строка которую мы перебираем
			{
				if (str[i] == ',')					//запятая стоящие перед номером телефона в файле
				{
					num++;
				}
				if (num == 2)						//после второй запятой находится номер телефона
				{
					point = i + 1;						//начало строки где находится номер телефона
					break;
				}
			}
			for (int j = 0; j < cstr.size(); j++)		//слово которое вводим для поиска
				for (int i = point; i < str.size(); i++)	//строка которую мы перебираем
					if (str[i] == cstr[j])
					{

						cout << str[i] << endl;
						cot++;

						//continue;
						break;	//после нахождения переменной поиск в строке прекрощается (2 - цикл) 
					}
			if (cot == cstr.size())
			{
				cout << "Строка найдена" << endl;
			}

					


						
			
			for (int j = 0; j < cstr.size(); j++)		//слово которое вводим для поиска
				for (int i = 0; i < str.size(); i++)	//строка которую мы перебираем
					if (str[i] == cstr[j])
					{
						
						cout << str[i] << endl;
						

						//continue;
						break;	//после нахождения переменной поиск в строке прекрощается (2 - цикл) 
					}
			
					
			
			cout << str << endl;
		}
		
		
		/*
		//ЭТО ДОЛЖНО БЫТЬ ЗАКАМЕНТИРОВАНО
		//считываем посимвольно
		char ch;
		//Если получилась считать с файла метод возвращает true, нет - false
		while (fin.get(ch))		//каждую итерацию считываем какй-то конкретный символ
		{
			cout << ch;			//будем выводить символы на экран
		}
		
		//fin.get()		//метод get посимвольно считывает данные с файла
		*/
	
	}
	fin.close();

	string path = "MyBase.txt";	//создание переменноц типа string
	string path2 = "ChangeBase.txt";

	int dan = 1;	//erfpsdftv какое сообщение нужно удалить

	fstream fs;			//создаем объект класса fstream
	fstream fs2;		//для отдельный базы
	fstream fs3;		//для перезаписи в базу данных
	//in - параметр, открытия файла на чтение
	//out - открытие файла на запись
	//app - данные записываются в конец файла

	fs.open(path, fstream::in | fstream::out | fstream::app);		//открываем файл и на запись в конец файла и на чтение 
	//fs2.open(path2);
	if (!fs.is_open())			//Проверка на существование файла
	{
		cout << "Ошибка открытие файла!" << endl;
	}
	else
	{

		string msg;		//буфер в котором мы будем хранить сообщения при вводе и при сохранении
		int value;
		cout << "Файл открыт" << endl;
		cout << "Нажмите 1 для записи сообщения в файл" << endl;
		cout << "Нажмите 2 для чтение всех файлов из файла " << endl;
		cout << "Нажмите 3 для удаление данных их файла" << endl;
		cin >> value;

		if (value == 1)
		{
			cout << "Введите путь к файлу!" << endl;

			//Нужно поменять кодировку самой консоли вызываем функцию
			//принимает кодировку в которой должна работать консоль	-
			SetConsoleCP(1251);			//нужно поменять кодировку на кирилицу
			cin >> msg;			//записываем сообщение в консоли
			fs << msg << "\n";	//помещяем сообщения в файл и организуем переход на следующую строку - \n 
			SetConsoleCP(866);			//возврашаем кодировку
		}

		if (value == 2)
		{
			int num = 0;	//считаем количество строк

			cout << "Чтение данных из файла" << endl;
			while (!fs.eof())	//читаем пока не закончится файл
			{

				msg = "";	//затираем сообщение чтобы не получить файл
				fs >> msg;
				num++;
				cout << num << " " << msg << endl;

			}
		}
		if (value == 3)
		{
			//int n = 0;
			int dstr = 0;		//указываем строку, которую нужно поменять
			int num = 0;	//считаем количество строк

			cout << "Удаление данных их файла" << endl;
			while (!fs.eof())	//читаем пока не закончится файл
			{
				//n++;

				msg = "";	//затираем сообщение чтобы не получить файл
				fs >> msg;	//чтение данных из файла
				num++;

				if (num != 2)					//строку которую нужно поменять
				{
					SetConsoleCP(1251);			//нужно поменять кодировку на кирилицу
					fs2 << msg << "\n";			//помещяем сообщения в файл и организуем переход на следующую строку - \n 
					SetConsoleCP(866);			//возврашаем кодировку
				}

				//cout << num << " " << msg << endl;

			}


			fs3.open(path, fstream::out);									//MyBase	очистка

			fs2.open(path2, fstream::in | fstream::out | fstream::app);
			while (!fs2.eof())	//читаем пока не закончится файл из Cha
			{

				msg = "";	//затираем сообщение чтобы не получить файл
				fs2 >> msg;	//чтение данных из файла ChangeBase


				SetConsoleCP(1251);			//нужно поменять кодировку на кирилицу
				fs3 << msg << "\n";			//помещяем сообщения в файл MyBase
				SetConsoleCP(866);			//возврашаем кодировку
			}
			fs2.close();
			fs.open(path2, fstream::out);							//очищаем файл ChangeBase
			fs3.close();
			fs.close();



		}

		// cout << num << endl;
	}

	fs.close();
	fs2.close();
	//fs3.close();


	

	return 0;
	
}
